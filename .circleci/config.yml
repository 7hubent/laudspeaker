version: 2.1
jobs:
  build_and_deploy:
    docker:
      - image: circleci/node:16
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run:
          command: |
            sudo apt-get install -y python-pip libyaml-dev python-dev jq
            sudo pip install awscli
            export AWS_ACCESS_KEY_ID=$DEMO_AWS_KEY
            export AWS_SECRET_ACCESS_KEY=$DEMO_AWS_SECRET
            aws configure set region $DEMO_AWS_REGION
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 427506656486.dkr.ecr.us-east-1.amazonaws.com
            docker build -f Dockerfile.client -t laudspeaker:latest .
            docker build -f Dockerfile.server -t laudspeaker:api-latest .
            docker tag laudspeaker:api-latest 427506656486.dkr.ecr.us-east-1.amazonaws.com/laudspeaker:api-latest
            docker tag laudspeaker:latest 427506656486.dkr.ecr.us-east-1.amazonaws.com/laudspeaker:latest
            docker push 427506656486.dkr.ecr.us-east-1.amazonaws.com/laudspeaker:api-latest
            docker push 427506656486.dkr.ecr.us-east-1.amazonaws.com/laudspeaker:latest
            aws ecs update-service --cluster ecs-demo --service api --force-new-deployment
            aws ecs update-service --cluster frontend --service frontend --force-new-deployment
  test:
    docker:
      - image: circleci/node:16
      - image: cypress/base:14.16.0
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run:
          command: |
            npm i
            docker build -f Dockerfile.client -t test .
            docker build -f Dockerfile.server -t api-test .
            docker pull postgres:14.4-alpine
            docker pull redis:alpine
            docker pull mongo:latest
            docker run -p 6379:6379 -d redis:alpine redis-server --save 60 1 --loglevel warning
            docker run -p 5432:5432 -d -e POSTGRES_USER=postgres -e POSTGRES_HOST_AUTH_METHOD=trust -e POSTGRES_DB=laudspeaker postgres:14.4-alpine
            docker run -d -p 27017:27017 mongo:latest
            docker run -d -p 3000:80 test
            docker run -d -p 3001:3001 api-test
      - run: npm install
      # - run: npm run test
      - run: npm run test:e2e:client
workflows:
  pull_request:
    jobs:
      - test
  main:    
    jobs:
      - build_and_deploy:
          filters:
            branches:
              only:
                - production
